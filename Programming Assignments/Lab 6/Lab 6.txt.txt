package Heap;

public class Heap {

    /**
     *
     * @param i - index of node
     * @return the parent node
     */
    public int parent(int i){
        return i;
    }

    /**
     *
     * @param i - index of node
     * @return the left child
     */
    public int leftChild(int i){
        return (2 * i) + 1;
    }

    /**
     *
     * @param i - index of node
     * @return the right child
     */
    public  int rightChild(int i){
        return (2 * i) + 2;
    }

    /**
     * algorithm to build a max heap
     * @param a - array used in making the max heap
     */
    public void build_max_heap(int[] a){
        int n = a.length;
        for (int i = n /2 - 1; i >= 0; i--) {
            max_heapify(a, n, i);
        }
    }

    /**
     * algorithm used to sort the array
     * @param a - array
     */
    public void heapSort(int a[]){

        int n = a.length;
        build_max_heap(a);
        for (int i = n - 1; i >= 0; i--){
            swap(a, 0, i);
            max_heapify(a, i, 0);
        }
    }

    /**
     * algorithm used to make a heap into a max heap
     * @param a - array
     * @param n - size of array
     * @param i - index position
     */
    public  void max_heapify(int a[], int n, int i){
        int left = leftChild(i);
        int right = rightChild(i);
        int parent = parent(i);

        // if the left child node's value is greater that its parent's
        if (left < n && a[left] > a[i]){
            parent = left;
        }
        // if the right child node's value is greater than its parent's
        if (right < n && a[right] > a[parent]){
            parent = right;
        }
        if (parent != i){
            int temp = a[i];
            a[i] = a[parent];
            a[parent] = temp;
            max_heapify(a, n, parent);
        }
    }
    public void swap(int arr[], int a, int b){
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

}
//----------------------------------------------------------------------


package Heap;



import java.util.Random;
import java.util.Scanner;

public class HeapRunner {
    public static void main(String[] args) {
        Heap h = new Heap();

        int a[] = input();
        int rep = 100;

        long start = nanosec();
        for (int j = 0; j < rep; j++) {
            populateArray(a);
            h.heapSort(a);
        }
        long end = nanosec();
        long avg = (end - start) / 2;
        System.out.println("The average time for heap sort through " + rep +" repetitions is " + avg + " nanoseconds");
        printArray(a);


    }

    /**
     * populates an array with random integers from -10000 to 10000
     * @param a
     */
    public static void populateArray(int [] a){
        for (int i = 0; i < a.length; i++) {
            a[i] = randInt();
        }
    }

    /**
     *
     * @return random int between -10000 and 10000
     */
    public static int randInt(){
        int min = -10001, max = 10001;

        Random rand = new Random();
        int randomNum = rand.nextInt((max - min) + 1) + min;
        return randomNum;
    }

    /**
     *
     * @return - array with size n
     */
    public static int[] input(){
        Scanner in = new Scanner(System.in);
        System.out.print("Enter integer n: "); int n = in.nextInt();
        int[] a = new int[n];
        return a;
    }

    /**
     * prints array
     * @param a - array
     */
    public static void printArray(int a[]){
        System.out.print("[ ");
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }
        System.out.print("]\n");
    }
    public static long nanosec(){
        return System.nanoTime();
    }

}

-----------------------------------------------------------------------------

package Selection;

import java.util.Random;
import java.util.Scanner;

public class SelectionRunner {
    public static void main(String[] args) {
        SelectionSort s = new SelectionSort();

        int a[] = input();
        int rep = 100;
        //i.printArray(a);
        long start = nanosec();
        for (int j = 0; j < rep; j++) {
            populateArray(a);
            s.sort(a);
            printArray(a);
        }
        long end = nanosec();
        long avg = (end - start) / 2;
        System.out.println("The average time for selection sort through " + rep +" repetitions is " + avg + " nanoseconds");
        //i.printArray(a);
    }
    /**
     * populates an array with random integers from -10000 to 10000
     * @param a
     */
    public static void populateArray(int [] a){
        for (int i = 0; i < a.length; i++) {
            a[i] = randInt();
        }
    }
    /**
     *
     * @return random int between -10000 and 10000
     */
    public static int randInt(){
        int min = -10001, max = 10001;

        Random rand = new Random();
        int randomNum = rand.nextInt((max - min) + 1) + min;
        return randomNum;
    }
    /**
     *
     * @return - array with size n
     */
    public static int[] input(){
        Scanner in = new Scanner(System.in);
        System.out.print("Enter integer n: "); int n = in.nextInt();
        int[] a = new int[n];
        return a;
    }
    /**
     * prints array
     * @param a - array
     */
    public static void printArray(int a[]){
        System.out.print("[ ");
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i] + " ");
        }
        System.out.print("]\n");
    }
    public static long nanosec(){
        return System.nanoTime();
    }


}

-----------------------------------------------------------

package Selection;

public class SelectionSort {
    /**
     * selection sort algorithm
     * @param a
     */
    public void sort(int[] a){
        for (int i = 0; i < a.length - 1; i++) {
            int min = i;
            for(int j = i + 1; j < a.length; j++){
                if (a[j] < a[min]) min = j;
            }
            swap(a, i, min);
        }
    }

    /**
     * swaps one element in an array with another
     * @param arr
     * @param a
     * @param b
     */
    public void swap(int arr[], int a, int b){
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }
}
